FILE SERVER
TUJUAN: melayani client dalam request file server

ATURAN PROTOKOL:
- client harus mengirimkan request dalam bentuk string
- string harus dalam format
  REQUEST spasi PARAMETER
- PARAMETER dapat berkembang menjadi PARAMETER1 spasi PARAMETER2 dan seterusnya
- Untuk upload file, client harus mengirimkan content file dalam format base64

REQUEST YANG DILAYANI:
- informasi umum:
  * Jika request tidak dikenali akan menghasilkan pesan "Invalid request format\r\n"
  * Semua result operasi file akan diberikan dalam bentuk JSON dan diakhiri
    dengan character ascii code #13#10#13#10 atau "\r\n\r\n"

TIME
* TUJUAN: untuk mendapatkan waktu dari server
* PARAMETER: tidak ada
* RESULT: "JAM HH:MM:SS\r\n" (format teks, bukan JSON)

QUIT
* TUJUAN: untuk mengakhiri koneksi
* PARAMETER: tidak ada
* RESULT: "Goodbye!\r\n" (format teks, bukan JSON)

LIST
* TUJUAN: untuk mendapatkan daftar seluruh file yang dilayani oleh file server
* PARAMETER: tidak ada
* RESULT:
- BERHASIL:
  - status: OK
  - data: list file
- GAGAL:
  - status: ERROR
  - data: pesan kesalahan

GET
* TUJUAN: untuk mendapatkan isi file dengan menyebutkan nama file dalam parameter
* PARAMETER:
  - PARAMETER1 : nama file
* RESULT:
- BERHASIL:
  - status: OK
  - data_namafile : nama file yang diminta
  - data_file : isi file yang diminta (dalam bentuk base64)
- GAGAL:
  - status: ERROR
  - data: pesan kesalahan

UPLOAD
* TUJUAN: untuk mengunggah file ke server
* PARAMETER:
  - PARAMETER1 : nama file
* PROTOCOL FLOW:
  1. Client mengirim "UPLOAD <filename>\r\n"
  2. Server menjawab "READY\r\n"
  3. Client mengirim konten file dalam base64 diakhiri "\r\n\r\n"
  4. Server memproses upload dan mengirim hasil
* RESULT:
- BERHASIL:
  - status: OK
  - data: pesan sukses
- GAGAL:
  - status: ERROR
  - data: pesan kesalahan

DELETE
* TUJUAN: untuk menghapus file di server
* PARAMETER:
  - PARAMETER1 : nama file
* RESULT:
- BERHASIL:
  - status: OK
  - data: pesan sukses
- GAGAL:
  - status: ERROR
  - data: pesan kesalahan

PENJELASAN TAMBAHAN:
Server telah ditingkatkan untuk mendukung operasi file (LIST, GET, UPLOAD, DELETE) sambil mempertahankan kompatibilitas dengan perintah lama (TIME, QUIT). Semua operasi file menggunakan encoding base64 untuk konten biner, memungkinkan transfer file aman melalui koneksi teks. Server menggunakan threading untuk menangani multiple client secara bersamaan. Protokol UPLOAD menggunakan sistem dua tahap untuk memungkinkan client mengirim file besar dengan aman.